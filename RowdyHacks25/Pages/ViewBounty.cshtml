@page
@model RowdyHacks25.Pages.ViewBountyModel
@{
    ViewData["Title"] = "View Bounty Details";
}

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap" rel="stylesheet">

<style>
    body { background: radial-gradient(circle at top, #0b0b2e, #000); font-family: 'Orbitron', sans-serif; color: #f0e6d2; min-height: 100vh; }
    .bounty-card { background-color: rgba(25, 25, 60, 0.9); border: 2px solid #ff9500; box-shadow: 0 0 25px #ff9500; padding: 2rem; border-radius: 1rem; max-width: 800px; margin: 4rem auto; }
    .bounty-image { max-width: 100%; height: auto; border-radius: 0.5rem; margin-bottom: 1rem; }
    .bounty-title { color: #ff9500; text-shadow: 0 0 15px #ff9500; margin-bottom: 1.5rem; }
    .bounty-detail { margin-bottom: 1rem; }
    .label { color: #ff9500; font-weight: bold; }
    .value { color: #f0e6d2; }
    .action-buttons { margin-top: 2rem; }
    .btn, .space-btn { background-color: #ff9500; color: #000; border: none; padding: 0.5rem 1.5rem; margin-right: 1rem; border-radius: 0.3rem; font-weight: bold; transition: 0.3s; text-decoration: none; display: inline-block; }
    .btn:hover, .space-btn:hover { background-color: #ffa733; box-shadow: 0 0 10px #ff9500; }
    .btn-danger, .space-btn-danger { background-color: #dc3545; }
    .btn-danger:hover, .space-btn-danger:hover { background-color: #bb2d3b; box-shadow: 0 0 10px #dc3545; }

    /* Bio/Summary blocks */
    details.box { margin-top: 1rem; }
    details.box summary { cursor: pointer; display: inline-block; margin-bottom: 0.75rem; }
    .content { white-space: pre-wrap; background: rgba(0,0,0,0.3); border: 1px solid #ff9500; border-radius: 0.5rem; padding: 1rem; }
    .muted { color: #aaa; }
</style>

<div class="bounty-card">
    @if (Model.Bounty != null)
    {
        <h1 class="bounty-title">🎯 @Model.Bounty.TargetName</h1>

        @if (!string.IsNullOrEmpty(Model.Bounty.ImageUrl))
        {
            <img src="@Model.Bounty.ImageUrl" alt="Target Image" class="bounty-image" />
        }

        <div class="bounty-detail"><span class="label">Planet:</span> <span class="value">@Model.Bounty.Planet</span></div>
        <div class="bounty-detail"><span class="label">Reward:</span> <span class="value">₡@Model.Bounty.Reward</span></div>
        <div class="bounty-detail"><span class="label">Danger Level:</span> <span class="value">@Model.Bounty.DangerLevel</span></div>
        <div class="bounty-detail"><span class="label">Status:</span> <span class="value">@Model.Bounty.Status</span></div>
        <div class="bounty-detail"><span class="label">Posted By:</span> <span class="value">@Model.Bounty.PostedBy</span></div>

        @if (!string.IsNullOrEmpty(Model.Bounty.ClaimedBy))
        {
            <div class="bounty-detail"><span class="label">Claimed By:</span> <span class="value">@Model.Bounty.ClaimedBy</span></div>
        }

        @if (!string.IsNullOrWhiteSpace(Model.Bounty.Bio))
        {
            <div class="bounty-detail"><span class="label">Biography:</span></div>
            <details class="box">
                <summary class="space-btn">Show Biography</summary>
                <div class="content">@Model.Bounty.Bio</div>
            </details>
        }

        <hr />

        <div class="bounty-detail"><span class="label">AI Summary:</span></div>
        <div id="aiSummarySection">
            @if (!Model.AiAvailable)
            {
                <p class="muted">AI summarization is not available (Gemini API is not configured).</p>
            }
            else if (!string.IsNullOrWhiteSpace(Model.Bounty.Summary))
            {
                <details class="box" open>
                    <summary class="space-btn">Show Summary</summary>
                    <div id="aiSummaryContent" class="content">@Model.Bounty.Summary</div>
                </details>
            }
            else
            {
                <p id="aiSummaryStatus" class="muted">No summary generated yet.</p>
                <button id="btnSummarize" class="space-btn">AI Summarize</button>
                <details id="aiSummaryBox" class="box" style="display:none;">
                    <summary class="space-btn">Show Summary</summary>
                    <div id="aiSummaryContent" class="content"></div>
                </details>

                <form id="aiSummarizeForm" method="post" asp-page-handler="Summarize" asp-route-id="@Model.Bounty.Id">
                    @Html.AntiForgeryToken()
                </form>
            }
        </div>

        <div class="action-buttons">
            <a href="/EditBounty?id=@Model.Bounty.Id" class="space-btn me-2">Edit Bounty</a>
            @if (Model.IsOwner)
            {
                <form method="post" style="display: inline;">
                    <button type="submit" class="space-btn space-btn-danger me-2" asp-page-handler="Delete">Delete Bounty</button>
                </form>
            }
            <a href="/Bounties" class="space-btn" style="background-color: #6c757d;">Back to List</a>
        </div>
    }
    else
    {
        <h2>Bounty not found!</h2>
        <div class="action-buttons">
            <a href="/Bounties" class="btn">Back to List</a>
        </div>  
    }
</div>

@section Scripts {
<script>
(() => {
    const btn = document.getElementById('btnSummarize');
    if (!btn) return;

    const status = document.getElementById('aiSummaryStatus');
    const box = document.getElementById('aiSummaryBox');
    const content = document.getElementById('aiSummaryContent');
    const form = document.getElementById('aiSummarizeForm');
    const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

    btn.addEventListener('click', async () => {
        btn.disabled = true;
        btn.textContent = 'Please wait...';
        status.textContent = 'Generating summary, please wait...';

        try {
            const url = `?handler=Summarize&id=@Model.Bounty!.Id`;
            const resp = await fetch(url, {
                method: 'POST',
                headers: { 'RequestVerificationToken': token }
            });

            let data;
            try { data = await resp.json(); } catch { data = {}; }

            if (!resp.ok || data.error) {
                const msg = data.error || `Error ${resp.status}`;
                status.textContent = msg;
                return;
            }

            const summaryText = data.summary || '';
            if (summaryText) {
                content.textContent = summaryText;
                box.style.display = '';
                status.textContent = 'Summary generated.';
            } else if (data.alreadyGenerated) {
                content.textContent = data.summary ?? '';
                box.style.display = '';
                status.textContent = 'Summary already generated.';
            } else {
                status.textContent = 'No summary returned.';
            }
        } catch (e) {
            console.error(e);
            status.textContent = 'Failed to generate summary.';
        } finally {
            btn.style.display = 'none';
        }
    });
})();
</script>
}
